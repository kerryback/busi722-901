---
title:  "Spot-Futures Parity"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    code-copy: hover
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 2023.scss]
    incremental: true
---

## Arbitrage and spot-futures parity

- In last session, looked at implications of the expectations hypothesis for the forward curve.
- In this session, we look at the implications of arbitrage.
- Question is: how do futures prices relate to spot (contango or backwardation) and why?
- Link between spot and futures is called spot-futures parity.

## Overview of arbitrage

- Suppose the forward curve is extremely steep.  At some point, it pays to buy spot and sell futures.
  - You can buy spot and hold and then deliver it on the futures contract.  So, you pay the spot price and receive the higher futures price.  
  - There are interest and other considerations we will discusss

##

- Suppose the forward curve is extremely downwards sloping.
  - If you can short sell the spot, you can sell spot and buy futures.  Accept delivery on the futures to cover the short spot position.
  - Or people who are long spot could sell it and buy futures to restore their long position.
  - Again, there are interest and other considerations.

## Synthetic long futures 

- On a long futures (ignoring daily settlement), you pay at the delivery date and accept delivery then.
- To duplicate this, you can borrow money, buy spot and hold until the delivery date.
- At the delivery date, you will have the asset and owe money (so you pay at the delivery date).
- You can create a synthetic long futures and sell the actual futures.

## Synthetic short futures 

- On a short futures (ignoring daily settlement), you deliver at the delivery date and get paid then.
- To duplicate this, you can short the spot and invest the proceeds in T-bills.
- At the delivery date, you cover the short and have cash (T-bills).
- You can create a synthetic short futures and buy the actual futures.

## Cost of carry and convenience yield

- Now, more details.  
- On the synthetic long futures, you pay at delivery the spot price plus interest.
- Also, there may be storage costs.
- Cost of carry = interest + storage costs.
- On the other hand, you may earn dividends, etc. when holding the asset.
- Convenience yield = dividends or other income

##

- Arbitrage implies futures price should not be higher than cost of synthetic long futures, so

. . .

$$\text{futures price} \le \text{spot price} +$$
$$\text{cost of carry} - \text{convenience yield}$$

##

- Also (when you can short) arbitrage implies futures price should not be less than cash generated by the synthetic short futures, so

. . .

$$\text{futures price} \ge \text{spot price} +$$
$$\text{cost of carry} - \text{convenience yield}$$

## Gold

- Convenience yield = 0
- Storage costs $\approx$ 0
- Can probably short, but also lots of gold in storage (longs can sell and then restore, like shorting and covering)
- So,

. . .

$$\text{futures price} = \text{spot price} +
\text{interest}$$
$$= \text{spot price} \times (1+r)^n$$

## Gold Forward Curve on 1-24-2022

. . .

```{python}
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sqlalchemy import create_engine
import pymssql
from datetime import datetime


codes = ['F','G','H','J','K','M','N','Q','U','V','X','Z']
codeToMonth = dict(zip(codes,range(1,13)))

def expiry(code) :
    year = code[-4:]
    month = codeToMonth[code[-5]]
    month = str(month) if month>=10 else '0'+str(month)
    return datetime.strptime(year+month,'%Y%m')

server = 'fs.rice.edu'
database = 'futures'
username = 'futures'
password = 'RCGCMO'
string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database 
conn = create_engine(string).connect()

df = pd.read_sql(" select * from data where code like 'CME_GC%' and date='2022-01-24' ", conn)    
df['expiry'] = df.code.apply(expiry)
df = df.sort_values(by='expiry').set_index('expiry')
trace = go.Scatter(
    x=df.index.to_list(),
    y=df.settle,
    mode="lines",
    hovertemplate="expiration = %{x}<br>futures price = $%{y:,.2f}<extra></extra>"
)

fig = go.Figure()
fig.add_trace(trace)
fig.update_layout(
    xaxis_title="Expiration",
    yaxis_title="Futures Price",
    xaxis_title_font = {"size":18},
    template="plotly_white",
    yaxis_tickprefix="$",
    height=600,  
    width=1000,
    font_size=16
)
fig.show()
```

## Stock index futures

- Cost of carry = interest rate
- Convenience yield = dividends,
- Can short, so

. . .

$$\text{futures price} = \text{spot price} +
\text{interest} - \text{dividends}$$

## S&P 500 Index Futures on 1-22-2016

. . .

```{python}
df = pd.read_sql(" select * from data where code like 'CME_ES%' and date='2016-01-22' ", conn)    
df['expiry'] = df.code.apply(expiry)
df = df.sort_values(by='expiry').set_index('expiry')
trace = go.Scatter(
    x=df.index.to_list(),
    y=df.settle,
    mode="lines",
    hovertemplate="expiration = %{x}<br>futures price = $%{y:,.2f}<extra></extra>"
)

fig = go.Figure()
fig.add_trace(trace)
fig.update_layout(
    xaxis_title="Expiration",
    yaxis_title="Futures Price",
    xaxis_title_font = {"size":18},
    template="plotly_white",
    height=600,  
    width=1000,
    font_size=16
)
fig.show()
```

## S&P 500 Index Futures on 1-24-2022

. . .

```{python}
df = pd.read_sql(" select * from data where code like 'CME_ES%' and date='2022-01-24' ", conn)    
df['expiry'] = df.code.apply(expiry)
df = df.sort_values(by='expiry').set_index('expiry')
trace = go.Scatter(
    x=df.index.to_list(),
    y=df.settle,
    mode="lines",
    hovertemplate="expiration = %{x}<br>futures price = $%{y:,.2f}<extra></extra>"
)

fig = go.Figure()
fig.add_trace(trace)
fig.update_layout(
    xaxis_title="Expiration",
    yaxis_title="Futures Price",
    xaxis_title_font = {"size":18},
    template="plotly_white",
    height=600,  
    width=1000,
    font_size=16
)
fig.show()
```

## Commodities

- Storage costs can be very high $\Rightarrow$ contango
  - Example: in April 2020, the front-month crude futures contract went negative
  - Forward curve was very steep
  - There was no available storage in Cushing, OK
- But convenience yield can also be very high $\Rightarrow$ backwardation
  - In shortages, spot spikes and markets move into backwardation

  
## WTI Futures on April 20, 2020

. . .

```{python}
df = pd.read_sql(" select * from data where code like 'CME_CL%' and date='2020-04-20' ", conn)    
df['expiry'] = df.code.apply(expiry)
df = df.sort_values(by='expiry').set_index('expiry')
trace = go.Scatter(
    x=df.index.to_list(),
    y=df.settle,
    mode="lines",
    hovertemplate="expiration = %{x}<br>futures price = $%{y:,.2f}<extra></extra>"
)

fig = go.Figure()
fig.add_trace(trace)
fig.update_layout(
    xaxis_title="Expiration",
    yaxis_title="Futures Price",
    xaxis_title_font = {"size":18},
    template="plotly_white",
    yaxis_tickprefix="$",
    height=600,  
    width=1000,
    font_size=16
)
fig.show()
```

## Natural gas futures on 1-24-2022

. . .

```{python}
df = pd.read_sql(" select * from data where code like 'CME_NG%' and date='2022-01-24' ", conn)    
df['expiry'] = df.code.apply(expiry)
df = df.sort_values(by='expiry').set_index('expiry')
trace = go.Scatter(
    x=df.index.to_list(),
    y=df.settle,
    mode="lines",
    hovertemplate="expiration = %{x}<br>futures price = $%{y:,.2f}<extra></extra>"
)

fig = go.Figure()
fig.add_trace(trace)
fig.update_layout(
    xaxis_title="Expiration",
    yaxis_title="Futures Price",
    xaxis_title_font = {"size":18},
    template="plotly_white",
    yaxis_tickprefix="$",
    yaxis_tickformat=".2f",
    height=600,  
    width=1000,
    font_size=16
)
fig.show()
```