---
title:  "Evaluate Returns"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    code-copy: hover
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 2023.scss]
    incremental: true
---

## Overview

- Suppose we've run a backtest and saved the portfolio returns.
- Evaluate raw returns: accumulation, drawdowns, mean, std dev, Sharpe ratio
- Evaluate relative to benchmarks
    - Compare to the market on a beta-adjusted basis
    - Compare to the market and other factors (attribution analysis)


## Drawdowns

- A drawdown occurs whenever your portfolio value is not as high as it once was
- The percent drawdown is (current value - prior max) / prior max.

## Statistics

- mean and std dev of monthly returns
- annualize mean by $\times$ 12
- annualize std dev by $\times$ sqrt(12)
- compute monthly excess returns (in excess of T-bill rate), mean and std dev and Sharpe ratio = mean / std dev
- annualize Sharpe ratio by $\times$ sqrt(12)

## Example accumulation plot

. . .

```{python}
import pandas as pd
import plotly.graph_objects as go
from pandas_datareader import DataReader as pdr

ret = pd.read_csv("files/rets.csv", index_col="date")
ret = 1.5*ret.best - 0.5*ret.worst

ff = pdr("F-F_Research_Data_Factors", "famafrench", start=2005)[0]/100
ff.index = ff.index.astype(str)
mkt = ff["Mkt-RF"] + ff["RF"]
rf = ff["RF"]

df = pd.concat((ret, mkt, rf), axis=1)
df.columns = ["ret", "mkt", "rf"]
trace1 = go.Scatter(
    x = df.index.to_list(),
    y = (1+df.ret).cumprod(),
    mode="lines",
    name="150-50 return",
    hovertemplate="%{x}<br>accumulation = $%{y:.2f}<extra></extra>"
)

trace2 = go.Scatter(
    x = df.index.to_list(),
    y = (1+df.mkt).cumprod(),
    mode="lines",
    name="market return",
    hovertemplate="%{x}<br>accumulation = $%{y:.2f}<extra></extra>"
)

fig = go.Figure(trace1)
fig.add_trace(trace2)
fig.update_layout(
    yaxis_title="",
    xaxis_title_font = {"size":18},
    template="plotly_white",
    yaxis_tickprefix="$",
    yaxis_tickformat=".2f",
    height=600,  
    width=1000,
    legend=dict(
      x = 0.01,
      y = 0.99
    ),
    font_size=16
)
fig.show()
```


## Example drawdown plot

. . .



```{python}
df["accum"] = (1+df.ret).cumprod()
accum_max = df.accum.expanding().max()
df["drawdown"] = df.accum/accum_max - 1

trace1 = go.Scatter(
    x = df.index.to_list(),
    y = df.accum,
    mode="lines",
    name="150-50 accumulation",
    hovertemplate="%{x}<br>accumulation = $%{y:.2f}<extra></extra>"
)

trace2 = go.Scatter(
    x = df.index.to_list(),
    y = df.drawdown,
    mode="lines",
    name="150-50 drawdown",
    hovertemplate="%{x}<br>drawdown = %{y:.1%}<extra></extra>"
)

from plotly.subplots import make_subplots


# Create figure with secondary y-axis
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add traces
fig.add_trace(trace1,
    secondary_y=False,
)

fig.add_trace(
    trace2,
    secondary_y=True,
)

import plotly.io as pio
plotly_template = pio.templates["plotly_white"]
colors = plotly_template.layout.colorway

# Set y-axes titles
fig.update_yaxes(title_text="<b>Accumulation</b>", title_font=dict(color=colors[0]), color=colors[0], tickformat=".2f", tickprefix="$", secondary_y=False)
fig.update_yaxes(title_text="<b>Drawdown</b>", title_font=dict(color=colors[1]), color=colors[1], tickformat=".0%", secondary_y=True)

fig.update_layout(
    template="plotly_white",
    height=600,  
    width=1000,
    legend=dict(
      x = 0.99,
      y = 0.01
    ),
    font_size=16,
    showlegend=False,
)
fig.show()
```






